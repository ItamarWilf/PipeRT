FROM nvcr.io/nvidia/l4t-base:r32.4.2

ENV DEBIAN_FRONTEND=noninteractive

# Set CUDA 10.0
RUN rm -rf /usr/local/cuda \
    && rm -rf /usr/local/cuda-10.2 \
    && export PATH=/usr/local/cuda-10.0/bin:$PATH \
    && ln -s /usr/local/cuda-10.0 /usr/local/cuda

#Install dependencies
RUN apt-get update -y \
    && apt-get upgrade -y \
    && apt-get autoremove -y \
    && apt-get install -y \
        gcc \
        build-essential \
        zlib1g-dev \
        wget \
        unzip \
        cmake \
        gfortran \
        libblas-dev \
        liblapack-dev \
        libgtk2.0-dev \
        libatlas-base-dev \
        git \
    && apt-get clean

#Install OPENCV dependencies
RUN apt-get update -y \
    && apt-get upgrade -y \
    && apt-get autoremove -y \
    && apt-get install -y \
        build-essential \
        cmake \
        git \
        gfortran \
        libatlas-base-dev \
        libavcodec-dev \
        libavformat-dev \
        libavresample-dev \
        libcanberra-gtk3-module \
        libdc1394-22-dev \
        libeigen3-dev \
        libglew-dev \
        libgstreamer-plugins-base1.0-dev \
        libgstreamer-plugins-good1.0-dev \
        libgstreamer1.0-dev \
        libgtk-3-dev \
        libjpeg-dev \
        libjpeg8-dev \
        libjpeg-turbo8-dev \
        liblapack-dev \
        liblapacke-dev \
        libopenblas-dev \
        libpng-dev \
        libpostproc-dev \
        libswscale-dev \
        libtbb-dev \
        libtbb2 \
        libtesseract-dev \
        libtiff-dev \
        libv4l-dev \
        libxine2-dev \
        libxvidcore-dev \
        libx264-dev \
        pkg-config \
        python3-dev \
        python3-numpy \
        python3-matplotlib \
        qv4l2 \
        v4l-utils \
        v4l2ucp \
        zlib1g-dev \
    && apt-get clean

# Install OPENCV
COPY build_opencv.sh .
RUN /bin/bash build_opencv.sh

#Install dependencies
RUN apt-get update -y \
    && apt-get upgrade -y \
    && apt-get autoremove -y \
    && apt-get install -y \
        python3-pip \
    && apt-get clean 

# Install Pillow
RUN pip3 install --upgrade pip \
    && pip3 install \
        scipy \
        cython \
		Pillow==6.2.1 --no-cache-dir --default-timeout=100 \
    && rm -fr /root/.cache

RUN apt-get install -y libffi-dev

ENV LC_CTYPE en_US.UTF-8
ENV LANG en_US.UTF-8

# Install requirements
COPY xavier-requirements.txt .
RUN pip3 install --upgrade pip \
    && pip3 install \
        -r xavier-requirements.txt --default-timeout=100 \
    && rm -fr /root/.cache && \
    rm xavier-requirements.txt

RUN pip3 install pyyaml

# Install pycocotools
RUN pip3 install --upgrade cython
RUN pip3 install pycocotools